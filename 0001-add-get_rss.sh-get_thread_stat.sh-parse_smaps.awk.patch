From 26d0ed0760d90f11e53b62d95e102fb27b8901e5 Mon Sep 17 00:00:00 2001
From: gmpy <gmpy_tiger@163.com>
Date: Thu, 10 Jun 2021 21:12:35 +0800
Subject: [PATCH] add: get_rss.sh get_thread_stat.sh parse_smaps.awk

get_rss.sh: get process RSS from /proc/<pid>/statm.
get_thread_stat.sh: get process stat from /proc/<pid>/tasks/<tid>/stat.
parse_smaps.awk: parse process memory usage from /proc/<pid>/smaps.
---
 README.md          |  3 +-
 get_rss.sh         | 37 +++++++++++++++++++
 get_thread_stat.sh | 62 +++++++++++++++++++++++++++++++
 parse_smaps.awk    | 92 ++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 193 insertions(+), 1 deletion(-)
 create mode 100755 get_rss.sh
 create mode 100755 get_thread_stat.sh
 create mode 100755 parse_smaps.awk

diff --git a/README.md b/README.md
index 43f4dbc9c0f3..3daa52d9f111 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,3 @@
 # scripts
-Some usefull scripts from work.
+
+Here are some usefull scripts from work.
diff --git a/get_rss.sh b/get_rss.sh
new file mode 100755
index 000000000000..54310cd12296
--- /dev/null
+++ b/get_rss.sh
@@ -0,0 +1,37 @@
+#!/bin/sh
+
+## FOR USERS
+##
+## Usage: get_rss.sh <process name or pid number>
+##        Parse /proc/<pid>/statm to get VSS and RSS.
+##        It's usefull for device on which ps/top can't show RSS.
+##
+## Eg.    $ get_rss.sh 1
+##        PID	VSS	RSS	CMD
+##        1    3MB    1MB    /sbin/procd ...
+
+if [ $# -lt 1 ]; then
+    echo "Please tell me pid or process name"    
+    exit 1
+fi
+
+get_pid() {
+    if $(echo $1 | grep -qE '^[0-9]+$'); then
+        echo $1
+    else
+        pidof $1
+    fi
+}
+
+echo -e "PID\tVSS\tRSS\tCMD"
+for p in $@
+do
+    pid="$(get_pid $p)"
+    cmd="$(cat /proc/${pid}/cmdline 2> /dev/null | \
+        awk '{for (i = 1; i <= NF; i++) {printf $1 " "}}')"
+    if [ -f "/proc/${pid}/statm" ]; then
+        echo -en "${pid}\t"
+        awk '{printf "%dMB\t%dMB", $1 * 4 / 1024, $2 * 4 / 1024}' /proc/${pid}/statm
+        printf "\t%.15s...\n" "${cmd}"
+    fi
+done
diff --git a/get_thread_stat.sh b/get_thread_stat.sh
new file mode 100755
index 000000000000..4f7c9e52619a
--- /dev/null
+++ b/get_thread_stat.sh
@@ -0,0 +1,62 @@
+#!/bin/sh
+
+## FOR USERS
+##
+## Usage: get_thread_stat.sh <process name or pid number>
+##        Parse /proc/<pid>/statm to get each thread stat.
+##        It's usefull for device on which ps/top can't show more.
+##
+## Eg.    $ get_thread_stat.sh 1
+##        == No. 0 ==
+##        comm: procd
+##        pid: 1
+##        stat: S
+##        min page fault: 39763
+##        max page fault: 26
+##        user time: 188 jiffies
+##        system time: 685 jiffies
+##        num threads : 1
+##        vsize size: 3162112 pages
+##        rss size: 269 pages
+##        running cpu: 1
+##        prio: 20
+##        nice: 0
+
+if [ $# -lt 1 ]; then
+    echo "Please tell me pid or process name"    
+    exit 1
+fi
+
+get_pid() {
+    if $(echo $1 | grep -qE '^[0-9]+$'); then
+        echo $1
+    else
+        pidof $1
+    fi
+}
+
+pid="$(get_pid $1)"
+tasks="$(ls /proc/${pid}/task)"
+cnt=0
+for task in ${tasks}
+do
+    echo "== No. ${cnt} =="
+    let cnt++
+
+    cat /proc/${pid}/task/${task}/stat | awk -F '[ |(|)]' '{
+        printf "comm: %s\n", $3;
+        printf "pid: %d\n", $1;
+        printf "stat: %s\n", $5;
+        printf "min page fault: %d\n", $12;
+        printf "max page fault: %d\n", $14;
+        printf "user time: %d jiffies\n", $16;
+        printf "system time: %d jiffies\n", $17;
+        printf "num threads : %d\n", $22;
+        printf "vsize size: %d pages\n", $25;
+        printf "rss size: %d pages\n", $26;
+        printf "running cpu: %d\n", $41;
+        printf "prio: %d\n", $20;
+        printf "nice: %d\n", $21;
+        printf "\n";
+    }'
+done
diff --git a/parse_smaps.awk b/parse_smaps.awk
new file mode 100755
index 000000000000..b6214137cbcb
--- /dev/null
+++ b/parse_smaps.awk
@@ -0,0 +1,92 @@
+#!/usr/bin/awk -f
+
+## FOR USERS
+##
+## Usage: parse_smaps.awk <path/for/smaps>
+##        Parse smaps and get the memory usage.
+##        1. Each section of memory usage (VSS, RSS, VSS).
+##        2. The total used memory of VmSize, RSS, PSS, Heap and Stack.
+## Node:  smaps is a file on Linux from /proc/<pid>/smaps if CONFIG_PROC_PAGE_MONITOR is set.
+##
+## Eg.    $ parse_smaps.awk /proc/1/smaps
+##        <  /sbin/procd>: (r-xp):  VmSize = 56KB; RSS = 56KB; PSS = 56KB
+##        <  /sbin/procd>: (r--p):  VmSize = 4KB;  RSS = 4KB;  PSS = 4KB
+##        ..
+##        ===== summary =====
+##        VmSize sum: 3088 KB
+##        RSS sum: 1076 KB
+##        PSS sum: 715 KB
+##        Heap sum: 420 KB
+##        Stack sum: 20 KB
+##        ===== detail (rss) =====
+##        /lib/libc-X.XX.so : vm = 1264  KB rw = 24     KB  ro = 324    KB
+##        [heap]            : vm = 532   KB rw = 420    KB  ro = 0      KB
+##        ...
+
+BEGIN {
+    i = 0
+    rss_sum = 0
+    pss_sum = 0
+    size_sum = 0
+}
+{
+    # new section
+    if ($1 ~ /^[[:digit:]]+/) {
+        if ($6 != "") {
+            if ($6 != cur_file) {
+                cur_file = $6
+                files[i] = $6
+                i++
+            }
+        }
+        if ($2 ~ /w/) {
+            cur_perm = "w"
+        } else {
+            cur_perm = "r"
+        }
+        printf "<%50s>: (%s):", $6, $2
+    }
+    if ($1 ~ /^Size/) {
+        printf "\tVmSize = %sKB; ", $2;
+        arr[cur_file"-size"] += $2
+        size_sum += $2
+    }
+    if ($1 ~ /^Rss/) {
+        printf "\tRSS = %sKB; ", $2;
+        arr[cur_file"-"cur_perm"-rss"] += $2
+        rss_sum += $2
+    }
+    if ($1 ~ /^Pss/) {
+        printf "\tPSS = %sKB\n", $2;
+        arr[cur_file"-"cur_perm"-pss"] += $2
+        pss_sum += $2
+    }
+}
+END {
+    printf "\n"
+    printf "===== summary =====\n"
+    printf "VmSize sum: %d KB\n", size_sum
+    printf "RSS sum: %d KB\n", rss_sum
+    printf "PSS sum: %d KB\n", pss_sum
+    printf "Heap sum: %d KB\n", arr["[heap]-w-rss"] + arr["[heap]-r-rss"]
+    printf "Stack sum: %d KB\n", arr["[stack]-w-rss"] + arr["[stack]-r-rss"]
+    printf "===== detail (rss) =====\n"
+    # sort
+    i = 0
+    j = 0
+    for (i = 0; i < length(files) - 1; i++) {
+        for (j = 0; j < length(files) - 1 - i; j++) {
+            if (arr[files[j]"-size"] < arr[files[j + 1]"-size"]) {
+                tmp = files[j]
+                files[j] = files[j + 1]
+                files[j + 1] = tmp
+            }
+        }
+    }
+    # print
+    for (i = 0; i < length(files); i++) {
+        file = files[i]
+        printf "%-40s: vm = %-10dKB\trw = %-7dKB\tro = %-7dKB\n", file, arr[file"-size"],
+               arr[file"-w-rss"], arr[file"-r-rss"]
+    }
+}
-- 
2.28.0

